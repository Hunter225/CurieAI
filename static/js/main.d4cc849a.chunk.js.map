{"version":3,"sources":["components/FadeInText.tsx","components/EmptyRow.tsx","components/FadeInPageLink.tsx","utils/delayRenderer.tsx","components/DownloadButton.tsx","utils/arrayToCsvString.tsx","utils/joinSampleAndResult.ts","pages/Classification/UploadAndTrain.tsx","pages/Classification/Classification.tsx","pages/Clustering/UploadAndTrain.tsx","pages/Clustering/Clustering.tsx","components/I18nText.tsx","pages/Regression/Regression.tsx","pages/DimenReduc/DimenReduc.tsx","pages/Root/Root.tsx","reportWebVitals.ts","i18n.ts","index.tsx"],"names":["FadeInText","withTranslation","canFadeIn","i18nKey","transitionTime","useTranslation","t","i18n","Fade","in","timeout","EmptyRow","marginFix","marginReponsive","classes","makeStyles","emptyRow","marginBottom","useStyles","Grid","item","xs","Divider","className","card","backgroundColor","color","cardContent","link","textTransform","textDecoration","fontSize","FadeInPageLink","path","hook","Card","CardContent","to","DelayRender","children","delayTime","useState","isShown","setIsShown","useEffect","setTimeout","button","DownloadButton","filePath","fileName","Button","href","download","arrayToCsvString","arrays","output","join","joinSampleAndResult","samples","result","resultArray","_","cloneDeep","i","length","push","input","display","UploadAndTrain","isUploaded","setIsUploaded","isLoading","setIsLoading","isResultFileReady","setIsResultFileReady","trainingData","setTrainingData","dataToBeLabeled","setDataToBeLabeled","headers","setHeaders","resultCsv","setResultCsv","cls","ensemble","RandomForestClassifier","UploadButton","accept","id","type","onChange","event","fileList","target","files","csvFile","get","papa","parse","dynamicTyping","complete","trainingDataTmp","toBeLabeledTmp","data","slice","datum","htmlFor","component","StartToTrain","onClick","X_train","map","Y_train","X_predict","fit","Y_predict","predict","predictionResult","csv","concat","DownloadResult","encodeURI","Typography","Classification","container","spacing","theme","createStyles","submitButton","justifyContent","textFieldFontColor","padding","fontFamily","fontWeight","lineHeight","letterSpacing","numOfCluster","setNumOfCluster","numOfClusterRef","createRef","InputNumOfClus","ref","defaultValue","Number","current","value","cluster","KMeans","k","X_cluster","clusteringResult","Clustering","I18nText","Regression","DimenReduc","_Root","Root","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","react","useSuspense","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4cc849a.chunk.js","sourcesContent":["import React from 'react';\nimport { Fade } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { withTranslation } from 'react-i18next';\n\ninterface FadeInTextInterface {\n  canFadeIn: boolean;\n  i18nKey: string;\n  transitionTime: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst _FadeInText = ({\n  canFadeIn,\n  i18nKey,\n  transitionTime\n}: FadeInTextInterface) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { t, i18n } = useTranslation();\n  return (\n    <Fade in={canFadeIn} timeout={transitionTime}>\n      <div>{t(`${i18nKey}`)}</div>\n    </Fade>\n  );\n};\n\nexport const FadeInText = withTranslation()(_FadeInText);\n","import React from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Divider } from '@material-ui/core';\ninterface EmptyRowInterface {\n  marginFix: number;\n  marginReponsive: number;\n}\n\nexport const EmptyRow = ({ marginFix, marginReponsive }: EmptyRowInterface) => {\n  const useStyles = makeStyles({\n    emptyRow: {\n      marginBottom: `calc(${marginFix}px + ${marginReponsive}vmin)`\n    }\n  });\n  const classes = useStyles();\n  return (\n    <Grid item xs={12}>\n      <Divider className={classes.emptyRow}></Divider>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Fade } from '@material-ui/core';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent } from '@material-ui/core';\n\ninterface FadeInPageLinkInterface {\n  canFadeIn: boolean;\n  i18nKey: string;\n  path: string;\n  hook: any;\n  transitionTime: number;\n}\n\nconst useStyles = makeStyles({\n  card: {\n    backgroundColor: '#34383f',\n    color: 'white'\n  },\n  cardContent: {\n    backgroundColor: '#34383f',\n    color: 'white'\n  },\n  link: {\n    backgroundColor: '#34383f',\n    color: 'white',\n    textTransform: 'none',\n    textDecoration: 'none',\n    fontSize: 'calc(8px + 2vmin)'\n  }\n});\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst _FadeInPageLink = ({\n  canFadeIn,\n  i18nKey,\n  path,\n  hook,\n  transitionTime\n}: FadeInPageLinkInterface) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { t, i18n } = useTranslation();\n  const classes = useStyles();\n\n  return (\n    <Fade in={canFadeIn} timeout={transitionTime}>\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          <Link className={classes.link} to={path}>\n            {t(`${i18nKey}`)}\n          </Link>\n        </CardContent>\n      </Card>\n    </Fade>\n  );\n};\n\nexport const FadeInPageLink = withTranslation()(_FadeInPageLink);\n","import { useEffect, useState } from 'react';\n\ninterface DelayRenderInterface {\n  children: any;\n  delayTime: number;\n}\n\nexport const DelayRender = ({ children, delayTime }: DelayRenderInterface) => {\n  const [isShown, setIsShown] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setIsShown(true);\n    }, delayTime);\n  }, [delayTime]);\n\n  return isShown ? children : null;\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\n\ninterface DownloadButtonInterface {\n  i18nKey: string;\n  filePath: string;\n  fileName: string;\n}\n\nconst useStyles = makeStyles({\n  card: {\n    backgroundColor: '#34383f',\n    color: 'white',\n    fontSize: 'calc(8px + 2hmin + 1vmin)'\n  },\n  cardContent: {\n    backgroundColor: '#34383f',\n    color: 'white'\n  },\n  button: {\n    backgroundColor: '#34383f',\n    color: 'white',\n    textDecoration: 'none'\n  }\n});\n\nexport const DownloadButton = ({\n  i18nKey,\n  filePath,\n  fileName\n}: DownloadButtonInterface) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { t, i18n } = useTranslation();\n  const classes = useStyles();\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.cardContent}>\n        <Button href={filePath} download={fileName} className={classes.button}>\n          {t(`${i18nKey}`)}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n","export const arrayToCsvString = (arrays: any[][]): string => {\n  let output = '';\n  for (const array of arrays) {\n    const row = array.join(',');\n    output = output + row + '\\n';\n  }\n  return output;\n};\n","import _ from 'lodash';\n\nexport const joinSampleAndResult = (samples: any[], result: any[]): any[] => {\n  const resultArray = _.cloneDeep(samples);\n  let i = 0;\n  while (i <= resultArray.length - 1) {\n    resultArray[i].push(result[i]);\n    i++;\n  }\n  return resultArray;\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Button, Typography } from '@material-ui/core';\nimport _ from 'lodash';\nimport papa from 'papaparse';\nimport { ensemble } from 'machinelearn';\nimport { arrayToCsvString } from '../../utils/arrayToCsvString';\nimport { joinSampleAndResult } from '../../utils/joinSampleAndResult';\n\nconst useStyles = makeStyles({\n  card: {\n    backgroundColor: '#34383f',\n    color: 'white',\n    fontSize: 'calc(8px + 2hmin + 1vmin)'\n  },\n  cardContent: {\n    backgroundColor: '#34383f',\n    color: 'white'\n  },\n  button: {\n    backgroundColor: '#34383f',\n    color: 'white',\n    textDecoration: 'none'\n  },\n  input: {\n    display: 'none'\n  }\n});\n\nexport const UploadAndTrain = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { t, i18n } = useTranslation();\n  const classes = useStyles();\n  const [isUploaded, setIsUploaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResultFileReady, setIsResultFileReady] = useState(false);\n  const [trainingData, setTrainingData] = useState([] as any[]);\n  const [dataToBeLabeled, setDataToBeLabeled] = useState([] as any[]);\n  // TODO: Let the user choose which column is Y_train\n  const [headers, setHeaders] = useState([] as any[]);\n  const [resultCsv, setResultCsv] = useState('');\n  const cls = new ensemble.RandomForestClassifier();\n\n  const UploadButton = () => {\n    return (\n      <div>\n        <input\n          accept='.csv'\n          className={classes.input}\n          id='contained-button-file'\n          type='file'\n          onChange={(event) => {\n            const fileList = event.target.files;\n            const csvFile = _.get(fileList, '0');\n            papa.parse(csvFile, {\n              // header: true,\n              dynamicTyping: true,\n              complete: (result) => {\n                const trainingDataTmp: any[] = [];\n                const toBeLabeledTmp: any[] = [];\n\n                let data = result.data;\n\n                setHeaders(data[0]);\n                data = _.slice(data, 1, data.length);\n\n                for (let datum of data) {\n                  if (datum[datum.length - 1] === null) {\n                    toBeLabeledTmp.push(datum);\n                  } else {\n                    trainingDataTmp.push(datum);\n                  }\n                }\n\n                setDataToBeLabeled(toBeLabeledTmp);\n                setTrainingData(trainingDataTmp);\n              }\n            });\n            setIsUploaded(true);\n          }}\n        />\n        <label htmlFor='contained-button-file'>\n          <Button className={classes.button} component='span'>\n            {t('general.upload-data')}\n          </Button>\n        </label>\n      </div>\n    );\n  };\n\n  const StartToTrain = () => {\n    return (\n      <div>\n        <Button\n          className={classes.button}\n          component='span'\n          onClick={() => {\n            setIsLoading(true);\n\n            const X_train = trainingData.map((datum) =>\n              _.slice(datum, 0, datum.length - 2)\n            );\n\n            const Y_train = trainingData.map(\n              (datum) => datum[datum.length - 1]\n            );\n\n            const X_predict = dataToBeLabeled.map((datum) =>\n              _.slice(datum, 0, datum.length - 1)\n            );\n\n            setTimeout(() => {\n              cls.fit(X_train, Y_train);\n              const Y_predict = cls.predict(X_predict);\n\n              const predictionResult = joinSampleAndResult(\n                X_predict,\n                Y_predict\n              );\n              const csv = arrayToCsvString(\n                _.concat([headers], predictionResult)\n              );\n              setResultCsv(csv);\n              setIsResultFileReady(true);\n            }, 500);\n          }}\n        >\n          {t('general.start')}\n        </Button>\n      </div>\n    );\n  };\n\n  const DownloadResult = () => {\n    return (\n      <Button\n        href={'data:text/csv;charset=utf-8,' + encodeURI(resultCsv)}\n        download='result.csv'\n        className={classes.button}\n      >\n        {t('general.download-result')}\n      </Button>\n    );\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.cardContent}>\n        {isResultFileReady ? (\n          <DownloadResult />\n        ) : isLoading ? (\n          <Typography>{t('general.loading')}</Typography>\n        ) : isUploaded ? (\n          <StartToTrain />\n        ) : (\n          <UploadButton />\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport './Classification.css';\nimport { Grid } from '@material-ui/core';\nimport { DownloadButton } from '../../components/DownloadButton';\nimport { UploadAndTrain } from './UploadAndTrain';\nimport { useTranslation } from 'react-i18next';\nimport { Typography } from '@material-ui/core';\nimport { EmptyRow } from '../../components/EmptyRow';\n\nexport const Classification = () => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <div className='Classification'>\n      <Grid id='top-row' container spacing={5}>\n        <Grid item xs={3}></Grid>\n\n        <Grid item xs={6}>\n          <Typography>{t('classification.hints')}</Typography>\n        </Grid>\n\n        <Grid item xs={3}></Grid>\n      </Grid>\n\n      <EmptyRow marginFix={0} marginReponsive={5}></EmptyRow>\n\n      <Grid id='second-row' container spacing={5}>\n        <Grid item xs={3}></Grid>\n        <Grid item xs={3}>\n          <DownloadButton\n            i18nKey='general.download-template'\n            filePath='/templates/classification/training_data_template.csv'\n            fileName='training_data_template.csv'\n          ></DownloadButton>\n        </Grid>\n        <Grid item xs={3}>\n          <UploadAndTrain />\n        </Grid>\n        <Grid item xs={3}></Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React, { useState, createRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Card, CardContent, Button, Typography } from '@material-ui/core';\nimport _ from 'lodash';\nimport papa from 'papaparse';\nimport { cluster } from 'machinelearn';\nimport { arrayToCsvString } from '../../utils/arrayToCsvString';\nimport { joinSampleAndResult } from '../../utils/joinSampleAndResult';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      backgroundColor: '#34383f',\n      color: 'white',\n      fontSize: 'calc(8px + 2hmin + 1vmin)'\n    },\n    cardContent: {\n      backgroundColor: '#34383f',\n      color: 'white'\n    },\n    button: {\n      backgroundColor: '#34383f',\n      color: 'white',\n      textDecoration: 'none'\n    },\n    submitButton: {\n      justifyContent: 'center',\n      backgroundColor: '#34383f',\n      color: 'white',\n      textDecoration: 'none'\n    },\n    input: {\n      display: 'none'\n    },\n    textFieldFontColor: {\n      color: 'white',\n      '& .MuiFormLabel-root': {\n        padding: '0',\n        fontSize: '1rem',\n        fontFamily: 'Roboto, \"Helvetica, Arial, sans-serif',\n        fontWeight: '400',\n        lineHeight: '1',\n        letterSpacing: '0.00938em',\n        color: 'white'\n      }\n    }\n  })\n);\n\nexport const UploadAndTrain = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { t, i18n } = useTranslation();\n  const classes = useStyles();\n  const [isUploaded, setIsUploaded] = useState(false);\n  const [numOfCluster, setNumOfCluster] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResultFileReady, setIsResultFileReady] = useState(false);\n  const [trainingData, setTrainingData] = useState([] as any[]);\n  // TODO: Let the user choose which column is Y_train\n  const [headers, setHeaders] = useState([] as any[]);\n  const [resultCsv, setResultCsv] = useState('');\n\n  const numOfClusterRef = createRef<HTMLInputElement>();\n\n  const UploadButton = () => {\n    return (\n      <div>\n        <input\n          accept='.csv'\n          className={classes.input}\n          id='contained-button-file'\n          type='file'\n          onChange={(event) => {\n            const fileList = event.target.files;\n            const csvFile = _.get(fileList, '0');\n            papa.parse(csvFile, {\n              // header: true,\n              dynamicTyping: true,\n              complete: (result) => {\n                const trainingDataTmp: any[] = [];\n\n                let data = result.data;\n\n                setHeaders(data[0]);\n                data = _.slice(data, 1, data.length);\n\n                for (let datum of data) {\n                  trainingDataTmp.push(datum);\n                }\n                setTrainingData(trainingDataTmp);\n              }\n            });\n            setIsUploaded(true);\n          }}\n        />\n        <label htmlFor='contained-button-file'>\n          <Button className={classes.button} component='span'>\n            {t('general.upload-data')}\n          </Button>\n        </label>\n      </div>\n    );\n  };\n\n  const InputNumOfClus = () => {\n    return (\n      <div>\n        <form>\n          <Typography>{t('clustering.num-of-clus')}</Typography>\n          <input type='text' ref={numOfClusterRef} defaultValue='4' />\n          <Button\n            type='submit'\n            className={classes.button}\n            onClick={() => {\n              setNumOfCluster(Number(numOfClusterRef?.current?.value));\n            }}\n          >\n            {t('general.submit')}\n          </Button>\n        </form>\n      </div>\n    );\n  };\n\n  const StartToTrain = () => {\n    return (\n      <div>\n        <Button\n          className={classes.button}\n          component='span'\n          onClick={() => {\n            setIsLoading(true);\n            const cls = new cluster.KMeans({ k: numOfCluster });\n\n            const X_train = trainingData;\n\n            setTimeout(() => {\n              cls.fit(X_train);\n              const X_cluster = cls.predict(X_train);\n\n              const clusteringResult = joinSampleAndResult(X_train, X_cluster);\n              const csv = arrayToCsvString(\n                _.concat([_.concat(headers, 'cluster')], clusteringResult)\n              );\n              setResultCsv(csv);\n              setIsResultFileReady(true);\n            }, 500);\n          }}\n        >\n          {t('general.start')}\n        </Button>\n      </div>\n    );\n  };\n\n  const DownloadResult = () => {\n    return (\n      <Button\n        href={'data:text/csv;charset=utf-8,' + encodeURI(resultCsv)}\n        download='result.csv'\n        className={classes.button}\n      >\n        {t('general.download-result')}\n      </Button>\n    );\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.cardContent}>\n        {isResultFileReady ? (\n          <DownloadResult />\n        ) : isLoading ? (\n          <Typography>{t('general.loading')}</Typography>\n        ) : isUploaded && numOfCluster > 0 ? (\n          <StartToTrain />\n        ) : isUploaded && numOfCluster <= 0 ? (\n          <InputNumOfClus />\n        ) : (\n          <UploadButton />\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","import React from 'react';\nimport './Clustering.css';\nimport { Grid } from '@material-ui/core';\nimport { DownloadButton } from '../../components/DownloadButton';\nimport { UploadAndTrain } from './UploadAndTrain';\nimport { useTranslation } from 'react-i18next';\nimport { Typography } from '@material-ui/core';\nimport { EmptyRow } from '../../components/EmptyRow';\n\nexport const Clustering = () => {\n  const { t, i18n } = useTranslation();\n  return (\n    <div className='Clustering'>\n      <Grid id='top-row' container spacing={5}>\n        <Grid item xs={3}></Grid>\n\n        <Grid item xs={6}>\n          <Typography>{t('clustering.hints')}</Typography>\n        </Grid>\n\n        <Grid item xs={3}></Grid>\n      </Grid>\n\n      <EmptyRow marginFix={0} marginReponsive={5}></EmptyRow>\n\n      <Grid id='second-row' container spacing={5}>\n        <Grid item xs={3}></Grid>\n        <Grid item xs={3}>\n          <DownloadButton\n            i18nKey='general.download-template'\n            filePath='/templates/clustering/training_data_template.csv'\n            fileName='training_data_template.csv'\n          ></DownloadButton>\n        </Grid>\n        <Grid item xs={3}>\n          <UploadAndTrain />\n        </Grid>\n        <Grid item xs={3}></Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface I18nTextInterface {\n  i18nKey: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const I18nText = ({ i18nKey }: I18nTextInterface) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { t, i18n } = useTranslation();\n  return <div>{t(`${i18nKey}`)}</div>;\n};\n","import React from 'react';\nimport { I18nText } from '../../components/I18nText';\nimport './Regression.css';\nimport { Grid } from '@material-ui/core';\n\nexport const Regression = () => {\n  return (\n    <div className='Regression'>\n      <Grid id='top-row' container spacing={5}>\n        <Grid item xs={12}>\n          <I18nText i18nKey='general.under-construction'></I18nText>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React from 'react';\nimport { I18nText } from '../../components/I18nText';\nimport './DimenReduc.css';\nimport { Grid } from '@material-ui/core';\n\nexport const DimenReduc = () => {\n  return (\n    <div className='DimenReduc'>\n      <Grid id='top-row' container spacing={5}>\n        <Grid item xs={12}>\n          <I18nText i18nKey='general.under-construction'></I18nText>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React from 'react';\nimport { FadeInText } from '../../components/FadeInText';\nimport { EmptyRow } from '../../components/EmptyRow';\nimport { FadeInPageLink } from '../../components/FadeInPageLink';\nimport './Root.css';\nimport { DelayRender } from '../../utils/delayRenderer';\nimport { Grid } from '@material-ui/core';\nimport { Classification } from '../Classification/Classification';\nimport { Clustering } from '../Clustering/Clustering';\nimport { Regression } from '../Regression/Regression';\nimport { DimenReduc } from '../DimenReduc/DimenReduc';\nimport { Switch, Route } from 'react-router-dom';\n\nconst _Root = () => {\n  return (\n    <div className='Root'>\n      <Grid id='top-row' container spacing={5}>\n        <Grid item xs={12}>\n          <FadeInText\n            i18nKey='intro.part1'\n            canFadeIn={true}\n            transitionTime={3000}\n          ></FadeInText>\n        </Grid>\n      </Grid>\n\n      <EmptyRow marginFix={0} marginReponsive={5}></EmptyRow>\n\n      <Grid id='second-row' container spacing={5}>\n        <Grid item xs={12}>\n          <DelayRender\n            children={\n              <FadeInText\n                i18nKey='intro.part2'\n                canFadeIn={true}\n                transitionTime={2000}\n              ></FadeInText>\n            }\n            delayTime={2000}\n          ></DelayRender>\n        </Grid>\n      </Grid>\n\n      <EmptyRow marginFix={0} marginReponsive={5}></EmptyRow>\n\n      <Grid id='third-row' container spacing={5}>\n        <Grid item xs={3}></Grid>\n        <Grid item xs={3}>\n          <DelayRender\n            children={\n              <FadeInPageLink\n                i18nKey='mission.classification'\n                canFadeIn={true}\n                path='/classification'\n                hook={<Classification></Classification>}\n                transitionTime={3000}\n              ></FadeInPageLink>\n            }\n            delayTime={3500}\n          ></DelayRender>\n        </Grid>\n        <Grid item xs={3}>\n          <DelayRender\n            children={\n              <FadeInPageLink\n                i18nKey='mission.clustering'\n                canFadeIn={true}\n                path='/clustering'\n                hook={<Clustering />}\n                transitionTime={3000}\n              ></FadeInPageLink>\n            }\n            delayTime={5000}\n          ></DelayRender>\n        </Grid>\n      </Grid>\n      <Grid item xs={3}></Grid>\n\n      <EmptyRow marginFix={0} marginReponsive={5}></EmptyRow>\n\n      {/* <Grid id='fourth-row' container spacing={5}>\n        <Grid item xs={3}></Grid>\n        <Grid item xs={3}>\n          <DelayRender\n            children={\n              <FadeInPageLink\n                i18nKey='mission.regression'\n                canFadeIn={true}\n                path='/regression'\n                hook={Regression}\n                transitionTime={3000}\n              ></FadeInPageLink>\n            }\n            delayTime={6500}\n          ></DelayRender>\n        </Grid>\n        <Grid item xs={3}>\n          <DelayRender\n            children={\n              <FadeInPageLink\n                i18nKey='mission.dimensionality-reduciton'\n                canFadeIn={true}\n                path='/dimen-reduc'\n                hook={DimenReduc}\n                transitionTime={3000}\n              ></FadeInPageLink>\n            }\n            delayTime={8000}\n          ></DelayRender>\n        </Grid>\n      </Grid> */}\n      <Grid item xs={3}></Grid>\n    </div>\n  );\n};\n\nexport const Root = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={_Root} />\n      <Route path='/classification' component={Classification} />\n      <Route path='/clustering' component={Clustering} />\n      <Route path='/regression' component={Regression} />\n      <Route path='/dimen-reduc' component={DimenReduc} />\n    </Switch>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n    interpolation: {\n      escapeValue: false // not needed for react as it escapes by default\n    },\n    react: {\n      useSuspense: false\n    }\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Root } from './pages/Root/Root';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Root />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}